classDiagram

    class CLEntity {
        +int? id
        +bool isCollection
        +DateTime addedDate
        +DateTime updatedDate
        +bool isDeleted
        +String? label
        +String? description
        +int? parentId
        +String? md5
        +int? fileSize
        +String? mimeType
        +String? type
        +String? extension
        +DateTime? createDate
        +int? height
        +int? width
        +double? duration
        +bool isHidden
        +String? pin
        +DateTime get sortDate()
        +CLMediaType get mediaType()
        +CLEntity copyWith(...)
        +CLEntity clone(...)
        +Map<String, dynamic> toMap()
        +String toJson()
        +Map<String, dynamic> toMapForDisplay()
        +bool isSame(CLEntity other)
        +bool isContentSame(CLEntity other)
        +String? get path()
        +String? get previewPath()
    }

    class StoreQuery~T~ {

        +String? storeIdentity
        +Map<String, dynamic> map
        +StoreQuery~T~ copyWith(...)
    }

    class EntityQuery {
        <<extends>> StoreQuery~CLEntity~
    }

    class EntityStore {
        <<abstract>>
        +String identity
        +Future~CLEntity?~ get([StoreQuery~CLEntity~? query])
        +Future~List~CLEntity~ getAll([StoreQuery~CLEntity~? query])
        +Future~CLEntity?~ upsert(CLEntity curr, String? path)
        +Future~bool~ delete(CLEntity item)
    }

    class CLStore {
        +EntityStore store
        +String tempCollectionName
        +String tempFilePath
        +Future~StoreEntity?~ dbSave(StoreEntity entity, String? path)
        +Future~bool~ delete(int entityId)
        +Future~StoreEntity?~ get([EntityQuery? query])
        +Future~List~StoreEntity~ getAll([EntityQuery? query])
        +Future~StoreEntity?~ createCollection(...)
        +Future~StoreEntity?~ createMedia(...)
        +Future~StoreEntity?~ updateCollection(...)
        +Future~StoreEntity?~ updateMedia(...)
        +String createTempFile( String ext)
    }

    class StoreEntity {
        +CLEntity data
        +CLStore store
        +String? path
        +Future~StoreEntity?~ updateWith(...)
        +Future~StoreEntity?~ cloneWith(...)
        +Future~StoreEntity?~ dbSave([String? path])
        +Future~void~ delete()
        +Future~StoreEntity?~ onPin()
        +Future~StoreEntity?~ onUnpin()
        +Future~StoreEntity?~ getParent()
        +Future~List~StoreEntity~ getChildren()
    }
    class LocalSQLiteEntityStore {
        +SQLiteTableAgent~CLEntity~ agent
        +String mediaPath
        +String previewPath
        +Future~bool~ delete(CLEntity item)
        +Future~CLEntity?~ get([StoreQuery~CLEntity~? query])
        +Future~List~CLEntity~~ getAll([StoreQuery~CLEntity~? query])
        +String? absoluteMediaPath(CLEntity media)
        +String? absolutePreviewPath(CLEntity media)
        +Future~bool~ createMediaFiles(CLEntity media, String path)
        +Future~bool~ deleteMediaFiles(CLEntity media)
        +Future~CLEntity?~ upsert(CLEntity curr, String? path)
        +static Future~EntityStore~ createStore(...)
    }

    class SQLiteTableAgent~T~ {
        +SqliteDatabase db
        +String table
        +T Function(Map<String, dynamic>)? fromMap
        +Map<String, dynamic>? Function(T obj) toMap
        +Future~DBQuery~T~~ Function(T obj) dbQueryForItem
        +List~String~ Function(T obj) getUniqueColumns
        +Set~String~ validColumns
        +bool autoIncrementId
        +Future~bool~ updateFromMap(...)
        +Future~T?~ readBack(...)
        +Future~T?~ upsert(...)
        +Future~void~ delete(...)
        +Future~List~T~~ upsertAll(...)
        +Future~List~T~~ getAll(...)
        +Future~T?~ get(...)
    }

    class SQLiteDBTableMixin~T~ {
        +Future~T?~ dbGet(...)
        +Future~List~T~~ dbGetAll(...)
        +Future~T?~ dbUpsert(...)
        +Future~void~ dbDelete(...)
    }

    class SQLiteDB {
        +SqliteDatabase db
        +static Future~SQLiteDB~ create(required String dbpath)
        +Future~void~ dispose()
    }

    class DBQuery~T~ {
        +String sql
        +List~dynamic~? parameters
        +static DBQuery~T~ fromStoreQuery(...)
    }

    class CLEntity {
        +int? id
        +bool isCollection
        +String? path
        +String? previewPath
        +CLEntity copyWith(...)
        +bool isSame(CLEntity other)
        +bool isContentSame(CLEntity other)
    }

    class StoreQuery~T~ {
        +String? storeIdentity
        +Map~String, dynamic~ map
    }

    class EntityStore {
        <<abstract>>
        +String identity
        +Future~CLEntity?~ get([StoreQuery~CLEntity~? query])
        +Future~List~CLEntity~~ getAll([StoreQuery~CLEntity~? query])
        +Future~CLEntity?~ upsert(CLEntity curr, String? path)
        +Future~bool~ delete(CLEntity item)
    }


    CLEntity --> CLMediaType : mediaType
    StoreQuery~T~ --> CLEntity : used to query
    EntityQuery ..|> StoreQuery~CLEntity~ : for type casting
    EntityStore --> CLEntity: CRUD Operations
    CLStore --> EntityStore : Uses
    CLStore --> StoreEntity: Updates
    StoreEntity --> CLEntity: includes as `data`
    StoreEntity --> CLStore : Queries
    StoreEntity --> EntityQuery : uses
   

    LocalSQLiteEntityStore ..|> EntityStore: Implements
    LocalSQLiteEntityStore ..|> SQLiteDBTableMixin~CLEntity~
    LocalSQLiteEntityStore --> SQLiteTableAgent~CLEntity~
    SQLiteTableAgent~T~ --> DBQuery~T~: Uses
    SQLiteDBTableMixin~T~ --> SQLiteTableAgent~T~
    SQLiteDB --> SqliteDatabase
    CLEntity --> StoreQuery~CLEntity~
    EntityStore --> CLEntity
    EntityQuery --> DBQuery~T~: gets converted into
   SQLiteTableAgent~T~ --> SqliteDatabase : Reads

   Exposed --> SQLiteDB: create and dispose
   Exposed --> CLStore: To create and Query for items 
   Exposed --> StoreEntity: data, update and delete 

   